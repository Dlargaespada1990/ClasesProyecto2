<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Documentacion</title>
    <meta charset="UTF-8"/>
<meta name="viewport" content="device-width, initial-scale=1.0" />
<link rel="stylesheet" href="styles.css"/>
<link href="https://fonts.googleapis.com/css2?family=Anton&family=Open+Sans&display=swap" rel="stylesheet">
    </head>
    <body>
  
   <nav id="navbar">
        <header>Documentacion JS </header>
        <ul>
          <li><a class="nav-link" href="#Introduccion">Introduccion</a> </li>
          <li><a class="nav-link" href="#Lo_que_ya_debes_saber">Lo que ya debes saber</a></li>
          <li><a class="nav-link" href="#JavaScript_y_Java" >JavaScript y Java</a></li>
          <li><a class="nav-link" href="#Hola_Mundo" >Hola Mundo</a></li>
          <li><a class="nav-link" href="#Variables">Variables</a> </li>
          <li><a class="nav-link" href="#Declaracion_de_variables">Declaracion de variables</a></li>
          <li><a class="nav-link" href="#Alcance_variable">Alcance variable</a> </li>
          <li><a class="nav-link" href="#Variables_globales">Variables globales</a> </li>

<li><a class="nav-link" href="#Referencia">Referencia</a> </li>
          </ul>

        </nav>

      <main id="main-doc" >

        <section class="main-section" id="Introduccion">
          <header>Introduccion</header>
<p>JavaScript es un lenguaje de secuencias de comandos orientado a objetos y multiplataforma. Es un lenguaje pequeño y ligero. Dentro de un entorno de host (por ejemplo, un navegador web), JavaScript se puede conectar a los objetos de su entorno para proporcionar control programático sobre ellos.</p>
<p>JavaScript contiene una biblioteca estándar de objetos, como Array, Date y Math, y un conjunto básico de elementos de lenguaje, como operadores, estructuras de control y sentencias. Core JavaScript se puede extender para una variedad de propósitos al complementarlo con objetos adicionales; Por ejemplo:</p>
<ul>
  <li>El JavaScript del lado del cliente amplía el lenguaje principal al proporcionar objetos para controlar un navegador y su Modelo de objetos de documento (DOM). Por ejemplo, las extensiones del lado del cliente permiten que una aplicación coloque elementos en un formulario HTML y responda a eventos del usuario, como clics del mouse, entrada de formulario y navegación de página.</li>
  <li>JavaScript del lado del servidor amplía el lenguaje central al proporcionar objetos relevantes para ejecutar JavaScript en un servidor. Por ejemplo, las extensiones del lado del servidor permiten que una aplicación se comunique con una base de datos, proporcionen continuidad de información de una invocación a otra de la aplicación o realicen manipulaciones de archivos en un servidor.</li>
  </ul> 
          </section>

          <section id="Lo_que_ya_debes_saber" class="main-section">
            <header>Lo que ya debes saber</header>
            <p>Esta guía asume que usted tiene los siguientes antecedentes básicos:</p>
            <ul>
              <li>Una comprensión general de Internet y la World Wide Web (WWW).</li>
              <li>Buen conocimiento práctico del lenguaje de marcado de hipertexto (HTML).</li>
              <li>Algo de experiencia en programación. Si eres nuevo en la programación, prueba uno de los tutoriales vinculados en la página principal sobre JavaScript.</li>
          </section>

<section id="JavaScript_y_Java" class="main-section">
  <header>JavaScript y Java</header>
  <p>JavaScript y Java son similares en algunos aspectos, pero fundamentalmente diferentes en otros. El lenguaje JavaScript se parece a Java, pero no tiene el tipado estático ni la verificación de tipos fuerte de Java. JavaScript sigue la mayoría de las sintaxis de expresiones de Java, las convenciones de nomenclatura y las construcciones básicas de flujo de control, razón por la cual se cambió el nombre de LiveScript a JavaScript.</p>
  <p>A diferencia del sistema de clases en tiempo de compilación de Java construido por declaraciones, JavaScript admite un sistema de tiempo de ejecución basado en una pequeña cantidad de tipos de datos que representan valores numéricos, booleanos y de cadena. JavaScript tiene un modelo de objetos basado en prototipos en lugar del modelo de objetos basado en clases más común. El modelo basado en prototipos proporciona una herencia dinámica; es decir, lo que se hereda puede variar para objetos individuales. JavaScript también admite funciones sin ningún requisito declarativo especial. Las funciones pueden ser propiedades de objetos, ejecutándose como métodos vagamente tipificados.</p>
  <p>JavaScript es un lenguaje de forma muy libre en comparación con Java. No tiene que declarar todas las variables, clases y métodos. No tiene que preocuparse por si los métodos son públicos, privados o protegidos, y no tiene que implementar interfaces. Las variables, los parámetros y los tipos de devolución de funciones no se escriben explícitamente.</p>
          </section>

          <section id="Hola_Mundo" class="main-section">
            <header>Hola Mundo</header>
            <p>Para comenzar a escribir JavaScript, abra el Bloc de notas y escriba su primer código JavaScript "Hola mundo":</p>
            <code>function greetMe(yourName) { alert("Hello " + yourName); }
greetMe("World");</code>
<p>Seleccione el código en el bloc y presione Ctrl+R para ver cómo se desarrolla en su navegador!<p>
          </section>

          <section id="Variables" class="main-section">
            <header>Variables</header>
            <p>Utiliza variables como nombres simbólicos para valores en su aplicación. Los nombres de las variables, llamados identificadores, se ajustan a ciertas reglas.</p>
            <p>Un identificador de JavaScript debe comenzar con una letra, un guión bajo (_) o un signo de dólar ($); los caracteres subsiguientes también pueden ser dígitos (0-9). Dado que JavaScript distingue entre mayúsculas y minúsculas, las letras incluyen los caracteres de la "A" a la "Z" (mayúsculas) y los caracteres de la "a" a la "z" (minúsculas).</p>
            <p>Puede utilizar ISO 8859-1 o letras Unicode como å y ü en los identificadores. También puede usar las secuencias de escape Unicode como caracteres en los identificadores. Algunos ejemplos de nombres legales son Number_hits, temp99 y _name.</p>
          </section>

          <section id="Declaracion_de_variables" class="main-section">
            <header>Declaracion de variables</header>
            <p>Puede declarar una variable de tres maneras:</p>
            <p>Con la palabra clave var. Por ejemplo,</p>
            <code>var x = 42.</code>
            <p>esta sintaxis se puede usar para declarar variables locales y globales.</p>
            <p>Simplemente asignándole un valor. Por ejemplo,</p>
            <code>x = 42.</code>
            <p>This siempre declara una variable global. Genera una advertencia estricta de JavaScript. No deberías usar esta variante.</p>
            <p>Con la palabra clave let. Por ejemplo,</p>
            <code>let y = 13.</code>
            <p>esta sintaxis se puede usar para declarar una variable local de ámbito de bloque. Consulte Alcance variable a continuación.</p>
          </section>

          <section id="Alcance_variable" class="main-section">
            <header>Alcance variable</header>
            <p>Cuando declara una variable fuera de cualquier función, se denomina variable global, porque está disponible para cualquier otro código en el documento actual. Cuando declara una variable dentro de una función, se denomina variable local, porque solo está disponible dentro de esa función.</p>
            <p>JavaScript anterior a ECMAScript 2015 no tiene alcance de declaración de bloque; más bien, una variable declarada dentro de un bloque es local a la función (o ámbito global) en el que reside el bloque. Por ejemplo, el siguiente código registrará 5, porque el alcance de x es la función (o contexto global) dentro del cual se declara x, no el bloque, que en este caso es una declaración if.</p>
            <code>if (true) { var x = 5; } console.log(x); // 5</code>
            <p>Este comportamiento cambia cuando se usa la declaración let introducida en ECMAScript 2015.</p>
            <code>if (true) { let y = 5; } console.log(y); // ReferenceError: y is
not defined</code>
          </section>

          <section id="Variables_globales" class="main-section">
            <header>Variables globales</header>
            <p>Las variables globales son, de hecho, propiedades del objeto global. En las páginas web, el objeto global es ventana, por lo que puede establecer y acceder a variables globales utilizando la sintaxis de ventana.variable.</p>
            <p>En consecuencia, puede acceder a las variables globales declaradas en una ventana o marco desde otra ventana o marco especificando el nombre de la ventana o marco. Por ejemplo, si en un documento se declara una variable denominada phoneNumber, puede hacer referencia a esta variable desde un iframe como parent.phoneNumber.</p>
          </section>

<section id="Referencia" class="main-section">
  <header>Referencia</header>
  <p>Toda la documentación en esta página está tomada de <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide">MDN</a></p>
  </section>

        </main>
      </body>
  </html>
  
  CSS
  
  #main-doc{
  width:65%;
  position:absolute;
  right:0px;
  margin-right:30px;
min-width:320px;
padding-bottom: 50px;


}

nav ul{
  margin-top:50px;
}

#navbar{
  position:fixed;
  left:0px;
  top:20px;
  margin-left:20px;
  width: 280px;
    height:100%;
     
     
}

main header{
font-family: 'Anton', sans-serif;
font-size:1.5rem;
margin-top:30px;
margin-bottom:40px
}

html{
  font-size: 18px
}

main p, li{
  font-family: 'Open Sans', sans-serif;
  font-size:0.9rem
}
body{
  background-color: white;
  
}

main li{
  margin-top: 20px;
}

main code{
background-color: #dceafc;
display:block;
padding:10px;
}

nav header{
  font-family: 'Open Sans', sans-serif;
  font-weight:bold;
  font-size:1.5rem;
}
nav li{
  padding:10px;
}

 * {
    scroll-behavior: smooth;
    
  }

@media(max-width:980px){
 
#main-doc{
    position: relative;
    margin-left: 20px;
    margin-top: 270px;
    width:95%;
}
#navbar{
position:absolute;
top:0px;

min-width:320px;
height:250px;
max-height:250px;
width:96%;
margin-left:2px;
text-align:center;
border-bottom:solid;
}
#navbar ul{
  list-style:none;
  max-height:200px;
      overflow-y: auto;
    overflow-x: hidden;
    
    margin-top:0px
}
}
